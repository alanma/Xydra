<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.xydra</groupId>
	<artifactId>maven-root</artifactId>
	<version>2010.02.19</version>
	<packaging>pom</packaging>

	<name>Xydra Maven Root</name>
	<inceptionYear>2010</inceptionYear>
	<description>
		This project contains only a pom.xml which models common Maven
		configuration settings. These settings are technical and build
		environment specific, but not project/domain specific.
	</description>

	<properties>
		<!--  tell the compiler we use 1.5 -->
		<maven.compiler.source>1.5</maven.compiler.source>
		<maven.compiler.target>1.5</maven.compiler.target>
	</properties>





	<build>
		<extensions>
			<extension>
				<groupId>org.jvnet.wagon-svn</groupId>
				<artifactId>wagon-svn</artifactId>
				<version>1.9</version>
			</extension>
		</extensions>

		<plugins>
			<!-- set encoding to UTF8 (not something platform dependent) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- set encoding to UTF8 (not something platform dependent) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- set encoding to UTF8 (not something platform dependent) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<configuration>
					<sourceEncoding>UTF-8</sourceEncoding>
				</configuration>
			</plugin>

			<!--
				build source packages for jars (but not for test jars)
				http://garbuz.com/sm/content.php/articles/maven2_deploying_sources/
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- use surefire version that works with Junit 4.x tests -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.4.3</version>
			</plugin>

			<!--
				configure site:stage and some display parameters for site generation
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>site</goal>
						</goals>
						<configuration>
							<!--  convenience param to disable reports -->
							<generateReports>true</generateReports>
							<inputEncoding>UTF-8</inputEncoding>
							<outputEncoding>UTF-8</outputEncoding>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<!--  convenience param to disable reports -->
					<generateReports>true</generateReports>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
					<stagingDirectory>../www-test</stagingDirectory>
				</configuration>
			</plugin>

			<!--
				bind the cobertura clean goal to the general clean goal as suggested
				in the book: Better builds with maven, p.196
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>clean</id>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<!-- configuration of reporting plugins to be displayed at the site -->
	<reporting>
		<plugins>
			<!-- switch on only the reports we want to see -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>
					maven-project-info-reports-plugin
				</artifactId>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>summary</report>
							<report>dependency-convergence</report>
							<report>project-team</report>
							<report>mailing-list</report>
							<report>dependencies</report>
							<report>issue-tracking</report>
							<report>license</report>
							<!-- we don't want to use the follwing -->
							<!-- <report>cim</report> -->
							<!-- <report>scm</report> -->
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!--
				provide links to several famous projects see: Better builds with
				maven, p.185
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<!--  do not aggregate javadocs from child elements-->
					<links>
						<link>
							http://java.sun.com/j2se/1.5.0/docs/api/
						</link>
						<link>
							http://jakarta.apache.org/commons/collections/apidocs-COLLECTIONS_3_0/
						</link>
						<link>http://www.junit.org/junit/javadoc/</link>
						<link>
							http://jakarta.apache.org/velocity/api/
						</link>
						<!--
							add our own projects in child-poms
						-->
					</links>
				</configuration>
			</plugin>

			<!-- display surefire results on site -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
			</plugin>

			<!-- generates PMD and CDP reports - java sourcecode analyzer -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<configuration>
					<targetJdk>1.5</targetJdk>
				</configuration>
			</plugin>

			<!-- creates sources as html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<configuration>
					<!-- interlink them with the api-doc of the project -->
					<linkJavadoc>true</linkJavadoc>
				</configuration>
			</plugin>

			<!-- reports the defined tags -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
				<!--  Latest version as of 2010-09-19 -->
				<configuration>
					<tags>
						<tag>TODO</tag>
						<tag>IMPROVE</tag>
						<tag>FIXME</tag>
						<tag>XXX</tag>
						<tag>@@</tag>
					</tags>
				</configuration>
			</plugin>

			<!-- performs a jDepend metric analysis -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
			</plugin>

			<!-- analyses test coverage of the project -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>

			<!-- searching for bug patterns in java bytecode -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<configuration>
					<xmlOutput>false</xmlOutput>
					<xmlOutputDirectory>
						target/findbugs
					</xmlOutputDirectory>
					<!--  High|Normal|Low|Exp|Ignore -->
					<threshold>Normal</threshold>
					<!--  Min|Default|Max -->
					<effort>Default</effort>
					<!--
						<excludeFilterFile>findbugs-exclude.xml</excludeFilterFile>
						<includeFilterFile>findbugs-include.xml</includeFilterFile>
						<visitors>FindDeadLocalStores,UnreadFields</visitors>
						<omitVisitors>FindDeadLocalStores,UnreadFields</omitVisitors>
						<pluginList>/libs/fb-contrib/fb-contrib-2.8.0.jar</pluginList>
					-->
				</configuration>
			</plugin>

			<!--
				informs on changes between releases needs a changes.xml file or a
				jira bugtracker
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>

				<!-- for JIRA report -->
				<!--
					<reportSets> <reportSet> <reports> <report>jira-report</report>
					</reports> </reportSet> </reportSets>
				-->

				<!-- for changes.xml file report-->
				<reportSets>
					<reportSet>
						<reports>
							<report>changes-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>


			<!--
				Get really nice JavaDocs with mvn compile javadoc:javadoc Read:
				http://code.google.com/p/apiviz/#Maven_2_Integration You need to
				install GraphViz locally first. Then set GRAPHVIZ_HOME to the /bin
				directory of your local GraphViz installation.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.0.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
					<charset>UTF-8</charset>
					<encoding>UTF-8</encoding>
					<docencoding>UTF-8</docencoding>
					<breakiterator>true</breakiterator>
					<version>true</version>
					<author>true</author>
					<keywords>true</keywords>
					<additionalparam>
						-sourceclasspath ${project.build.outputDirectory}
          </additionalparam>
				</configuration>
			</plugin>


		</plugins>
	</reporting>

	<!-- proposing dependencies and their versions -->
	<dependencyManagement>
		<dependencies>
			<!-- common dependencies (useful utils)-->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>1.3.1</version>
			</dependency>

			<!-- logging dependencies -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>1.5.0</version>
			</dependency>

			<dependency>
				<scope>runtime</scope>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>1.5.0</version>
			</dependency>

			<dependency>
				<scope>runtime</scope>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>1.2.14</version>
			</dependency>

			<!-- testing dependencies -->
			<dependency>
				<scope>test</scope>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.8.2</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!--  Local settings to deploy *this* pom -->
	<distributionManagement>
		<downloadUrl>http://code.google.com/p/xydra/downloads/list</downloadUrl>
		<repository>
			<id>xydra-repo</id>
			<uniqueVersion>false</uniqueVersion>
			<url>svn:https://xydra.googlecode.com/svn/repository</url>
		</repository>
		<snapshotRepository>
			<id>xydra-snap</id>
			<uniqueVersion>false</uniqueVersion>
			<url>svn:https://xydra.googlecode.com/svn/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

</project>