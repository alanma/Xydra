package de.xam.cx.wadl;

import java.io.File;

import javax.ws.rs.core.MediaType;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import com.sun.jersey.api.model.AbstractMethod;
import com.sun.jersey.api.model.AbstractResource;
import com.sun.jersey.api.model.AbstractResourceMethod;
import com.sun.jersey.api.model.Parameter;
import com.sun.jersey.server.wadl.WadlGenerator;
import com.sun.jersey.server.wadl.generators.resourcedoc.ResourceDocAccessor;
import com.sun.jersey.server.wadl.generators.resourcedoc.model.MethodDocType;
import com.sun.jersey.server.wadl.generators.resourcedoc.model.ResourceDocType;
import com.sun.research.ws.wadl.Application;
import com.sun.research.ws.wadl.Doc;
import com.sun.research.ws.wadl.Method;
import com.sun.research.ws.wadl.Param;
import com.sun.research.ws.wadl.RepresentationType;
import com.sun.research.ws.wadl.Request;
import com.sun.research.ws.wadl.Resource;
import com.sun.research.ws.wadl.Resources;
import com.sun.research.ws.wadl.Response;


public class ExampleWadlGenerator implements WadlGenerator {
	
	private WadlGenerator delegate;
	private File resourceDocFile;
	private ResourceDocAccessor resourceDoc;
	
	public void setWadlGeneratorDelegate(WadlGenerator delegate) {
		this.delegate = delegate;
	}
	
	public String getRequiredJaxbContextPath() {
		return this.delegate.getRequiredJaxbContextPath();
	}
	
	public void setResourceDocFile(File resourceDocFile) {
		this.resourceDocFile = resourceDocFile;
	}
	
	public void init() throws Exception {
		this.delegate.init();
		ResourceDocType resourceDoc = loadFile(this.resourceDocFile, ResourceDocType.class,
		        ResourceDocType.class);
		this.resourceDoc = new ResourceDocAccessor(resourceDoc);
	}
	
	private <T> T loadFile(File fileToLoad, Class<T> targetClass, Class<?> ... classesToBeBound) {
		if(fileToLoad == null) {
			throw new IllegalArgumentException("The resource-doc file to load is not set!");
		}
		try {
			JAXBContext c = JAXBContext.newInstance(classesToBeBound);
			Unmarshaller m = c.createUnmarshaller();
			return targetClass.cast(m.unmarshal(fileToLoad));
		} catch(Exception e) {
			throw new RuntimeException("Could not unmarshal file " + fileToLoad, e);
		}
	}
	
	public Application createApplication() {
		return this.delegate.createApplication();
	}
	
	public Method createMethod(AbstractResource r, AbstractResourceMethod m) {
		Method result = this.delegate.createMethod(r, m);
		MethodDocType methodDoc = this.resourceDoc
		        .getMethodDoc(r.getResourceClass(), m.getMethod());
		if(methodDoc != null && methodDoc.getAny() != null && !methodDoc.getAny().isEmpty()) {
			for(Object any : methodDoc.getAny()) {
				System.out.println("ev: " + (any instanceof ExampleValue) + " any: " + any);
				if(any instanceof ExampleValue) {
					ExampleValue val = (ExampleValue)any;
					Doc doc = new Doc();
					doc.getContent().add("<h1>" + val.getValue() + "</h1>");
					result.getDoc().add(doc);
				}
			}
		}
		return result;
	}
	
	public Request createRequest(AbstractResource arg0, AbstractResourceMethod arg1) {
		return this.delegate.createRequest(arg0, arg1);
	}
	
	public Param createParam(AbstractResource arg0, AbstractMethod arg1, Parameter arg2) {
		return this.delegate.createParam(arg0, arg1, arg2);
	}
	
	public RepresentationType createRequestRepresentation(AbstractResource arg0,
	        AbstractResourceMethod arg1, MediaType arg2) {
		return this.delegate.createRequestRepresentation(arg0, arg1, arg2);
	}
	
	public Resource createResource(AbstractResource arg0, String arg1) {
		return this.delegate.createResource(arg0, arg1);
	}
	
	public Resources createResources() {
		return this.delegate.createResources();
	}
	
	public Response createResponse(AbstractResource arg0, AbstractResourceMethod arg1) {
		return this.delegate.createResponse(arg0, arg1);
	}
	
}
